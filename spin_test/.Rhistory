### Make Trinarized Maps for Spin Test  ###
###########################################
### Author: Erica Baller
### Date 3/10/21
### pre: statistical maps (l and r), each 10242 vertices
### post: 6 matrices with 1s if value fdr corrected, 0 if not, and -1 if vertex in medial wall of yeo map
# lh and rh pos and neg together, positive alone, and negative alone
### uses: In order to spin my vertices in a way that allows me to later assess their yeo membership, I need all of my fdr values indicated, as well as which values are in the medial wall.  This script takes lh and rh fdr corrected vectors generated in previous scripts, booleanizes them into in/out of fdr map. Then, -1s are added for vertices in the medial wall.
### dependencis: and R will do. I used 3.2.5
## set abs and relative paths. Must toggle before running locally/on cluster
#homedir = "/Users/eballer/BBL/imco/pmacs/PMACS_remote"
homedir = "/project/imco"
source(paste0(homedir, mydirec, scriptsPath, '/imco_functions.R'))
#### set # parcels in case I want to do 7 or 17 or something else in the future
parcel_type = "Yeo"
parcel_num = 7
input_parcel_array_length = 10242
#if I'd like to make mean maps as well
mean_maps = 1
#will loop through each of these
analyses <- c("coupling_accuracy") #, "cbf_accuracy", "alff_accuracy")
models <- c("gam_age", "gam_sex", "gam_exec_accuracy", "gam_pos_exec_accuracy", "gam_neg_exec_accuracy") #gam_age", "lm_age", "gam_sex", "lm_sex", "lm_accuracy", "lm_exec_accuracy")
corrs <- c("fdr05") #correction
parcel_mapping <- get_parcel_mapping_yeo(7)
lh_numerical_map <- parcel_mapping[[1]]
rh_numerical_map <- parcel_mapping[[2]]
for (analysis in analyses) {
for (model in models) {
for (corr in corrs) {
### set results path
stat_path <- paste0("/", analysis, "/")
print(stat_path)
result_path <- paste0(model, "_t_", corr)
print(result_path)
### set paths
## input
lh_stat_map <- read.csv(paste0(homedir, "/baller/results/", stat_path, "lh_", result_path, ".csv"), header = F)
rh_stat_map <- read.csv(paste0(homedir, "/baller/results/", stat_path, "rh_", result_path, ".csv"), header = F)
## output
lh_outdir <- paste0(homedir, "/baller/results/", stat_path, "lh_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir <- paste0(homedir, "/baller/results/", stat_path, "rh_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
lh_outdir_pos <- paste0(homedir, "/baller/results/", stat_path, "lh_pos_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir_pos <- paste0(homedir, "/baller/results/", stat_path, "rh_pos_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
lh_outdir_neg <- paste0(homedir, "/baller/results/", stat_path, "lh_neg_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir_neg <- paste0(homedir, "/baller/results/", stat_path, "rh_neg_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
#convert stat map to boolean
lh_stat_boolean <- ifelse(lh_stat_map == 0, 0, 1)
rh_stat_boolean <- ifelse(rh_stat_map == 0, 0, 1)
lh_stat_boolean_pos <- ifelse(lh_stat_map > 0, 1, 0)
rh_stat_boolean_pos <- ifelse(rh_stat_map > 0, 1, 0)
lh_stat_boolean_neg <- ifelse(lh_stat_map < 0, 1, 0)
rh_stat_boolean_neg <- ifelse(rh_stat_map < 0, 1, 0)
#convert NAs to 0
lh_stat_boolean[is.na(lh_stat_boolean)] <- 0
rh_stat_boolean[is.na(rh_stat_boolean)] <- 0
lh_stat_boolean_pos[is.na(lh_stat_boolean_pos)] <- 0
rh_stat_boolean_pos[is.na(rh_stat_boolean_pos)] <- 0
lh_stat_boolean_neg[is.na(lh_stat_boolean_neg)] <- 0
rh_stat_boolean_neg[is.na(rh_stat_boolean_neg)] <- 0
#substitute -1 for those locations with medial wall stuff
lh_medial_wall_nums <- which(lh_numerical_map == 8)
rh_medial_wall_nums <- which(rh_numerical_map == 8)
lh_stat_boolean[lh_medial_wall_nums] <- -1
rh_stat_boolean[rh_medial_wall_nums] <- -1
lh_stat_boolean_pos[lh_medial_wall_nums] <- -1
rh_stat_boolean_pos[rh_medial_wall_nums] <- -1
lh_stat_boolean_neg[lh_medial_wall_nums] <- -1
rh_stat_boolean_neg[rh_medial_wall_nums] <- -1
#write output
write.table(x = lh_stat_boolean, file = lh_outdir, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean, file = rh_outdir, quote = F, row.names = F, col.names = F)
write.table(x = lh_stat_boolean_pos, file = lh_outdir_pos, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean_pos, file = rh_outdir_pos, quote = F, row.names = F, col.names = F)
write.table(x = lh_stat_boolean_neg, file = lh_outdir_neg, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean_neg, file = rh_outdir_neg, quote = F, row.names = F, col.names = F)
}
}
}
###########################
##### for mean maps #######
###########################
if (mean_maps == 1){
#read in maps
lh_map <- read.csv(paste0(homedir, '/baller/results/mean_maps/n831_lh.coupling_coef_alff_cbf.fwhm15.fsaverage5.csv'), header = F)
rh_map <- read.csv(paste0(homedir, '/baller/results/mean_maps/n831_rh.coupling_coef_alff_cbf.fwhm15.fsaverage5.csv'), header = F)
#set medial wall to -1
lh_medial_wall_nums <- which(lh_numerical_map == 8)
rh_medial_wall_nums <- which(rh_numerical_map == 8)
lh_map$V1[lh_medial_wall_nums] = -1
rh_map$V1[rh_medial_wall_nums] = -1
#save maps
write.table(x = lh_map$V1, file = (paste0(homedir, '/baller/results/lh_mean_coupling_med_wall_-1.csv')), quote = F, row.names = F, col.names = F)
write.table(x = lh_map$V1, file = (paste0(homedir, '/baller/results/rh_mean_coupling_med_wall_-1.csv')), quote = F, row.names = F, col.names = F)
}
###########################################
### Make Trinarized Maps for Spin Test  ###
###########################################
### Author: Erica Baller
### Date 3/10/21
### pre: statistical maps (l and r), each 10242 vertices
### post: 6 matrices with 1s if value fdr corrected, 0 if not, and -1 if vertex in medial wall of yeo map
# lh and rh pos and neg together, positive alone, and negative alone
### uses: In order to spin my vertices in a way that allows me to later assess their yeo membership, I need all of my fdr values indicated, as well as which values are in the medial wall.  This script takes lh and rh fdr corrected vectors generated in previous scripts, booleanizes them into in/out of fdr map. Then, -1s are added for vertices in the medial wall.
### dependencis: and R will do. I used 3.2.5
## set abs and relative paths. Must toggle before running locally/on cluster
#homedir = "/Users/eballer/BBL/imco/pmacs/PMACS_remote"
homedir = "/project/imco"
source(paste0(homedir, mydirec, scriptsPath, '/imco_functions.R'))
#### set # parcels in case I want to do 7 or 17 or something else in the future
parcel_type = "Yeo"
parcel_num = 7
input_parcel_array_length = 10242
#if I'd like to make mean maps as well
mean_maps = 1
#will loop through each of these
analyses <- c("coupling_accuracy") #, "cbf_accuracy", "alff_accuracy")
models <- c("gam_age", "gam_sex", "gam_exec_accuracy") #gam_age", "lm_age", "gam_sex", "lm_sex", "lm_accuracy", "lm_exec_accuracy")
corrs <- c("fdr05") #correction
parcel_mapping <- get_parcel_mapping_yeo(7)
lh_numerical_map <- parcel_mapping[[1]]
rh_numerical_map <- parcel_mapping[[2]]
for (analysis in analyses) {
for (model in models) {
for (corr in corrs) {
### set results path
stat_path <- paste0("/", analysis, "/")
print(stat_path)
result_path <- paste0(model, "_t_", corr)
print(result_path)
### set paths
## input
lh_stat_map <- read.csv(paste0(homedir, "/baller/results/", stat_path, "lh_", result_path, ".csv"), header = F)
rh_stat_map <- read.csv(paste0(homedir, "/baller/results/", stat_path, "rh_", result_path, ".csv"), header = F)
## output
lh_outdir <- paste0(homedir, "/baller/results/", stat_path, "lh_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir <- paste0(homedir, "/baller/results/", stat_path, "rh_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
lh_outdir_pos <- paste0(homedir, "/baller/results/", stat_path, "lh_pos_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir_pos <- paste0(homedir, "/baller/results/", stat_path, "rh_pos_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
lh_outdir_neg <- paste0(homedir, "/baller/results/", stat_path, "lh_neg_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir_neg <- paste0(homedir, "/baller/results/", stat_path, "rh_neg_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
#convert stat map to boolean
lh_stat_boolean <- ifelse(lh_stat_map == 0, 0, 1)
rh_stat_boolean <- ifelse(rh_stat_map == 0, 0, 1)
lh_stat_boolean_pos <- ifelse(lh_stat_map > 0, 1, 0)
rh_stat_boolean_pos <- ifelse(rh_stat_map > 0, 1, 0)
lh_stat_boolean_neg <- ifelse(lh_stat_map < 0, 1, 0)
rh_stat_boolean_neg <- ifelse(rh_stat_map < 0, 1, 0)
#convert NAs to 0
lh_stat_boolean[is.na(lh_stat_boolean)] <- 0
rh_stat_boolean[is.na(rh_stat_boolean)] <- 0
lh_stat_boolean_pos[is.na(lh_stat_boolean_pos)] <- 0
rh_stat_boolean_pos[is.na(rh_stat_boolean_pos)] <- 0
lh_stat_boolean_neg[is.na(lh_stat_boolean_neg)] <- 0
rh_stat_boolean_neg[is.na(rh_stat_boolean_neg)] <- 0
#substitute -1 for those locations with medial wall stuff
lh_medial_wall_nums <- which(lh_numerical_map == 8)
rh_medial_wall_nums <- which(rh_numerical_map == 8)
lh_stat_boolean[lh_medial_wall_nums] <- -1
rh_stat_boolean[rh_medial_wall_nums] <- -1
lh_stat_boolean_pos[lh_medial_wall_nums] <- -1
rh_stat_boolean_pos[rh_medial_wall_nums] <- -1
lh_stat_boolean_neg[lh_medial_wall_nums] <- -1
rh_stat_boolean_neg[rh_medial_wall_nums] <- -1
#write output
write.table(x = lh_stat_boolean, file = lh_outdir, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean, file = rh_outdir, quote = F, row.names = F, col.names = F)
write.table(x = lh_stat_boolean_pos, file = lh_outdir_pos, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean_pos, file = rh_outdir_pos, quote = F, row.names = F, col.names = F)
write.table(x = lh_stat_boolean_neg, file = lh_outdir_neg, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean_neg, file = rh_outdir_neg, quote = F, row.names = F, col.names = F)
}
}
}
###########################
##### for mean maps #######
###########################
if (mean_maps == 1){
#read in maps
lh_map <- read.csv(paste0(homedir, '/baller/results/mean_maps/n831_lh.coupling_coef_alff_cbf.fwhm15.fsaverage5.csv'), header = F)
rh_map <- read.csv(paste0(homedir, '/baller/results/mean_maps/n831_rh.coupling_coef_alff_cbf.fwhm15.fsaverage5.csv'), header = F)
#set medial wall to -1
lh_medial_wall_nums <- which(lh_numerical_map == 8)
rh_medial_wall_nums <- which(rh_numerical_map == 8)
lh_map$V1[lh_medial_wall_nums] = -1
rh_map$V1[rh_medial_wall_nums] = -1
#save maps
write.table(x = lh_map$V1, file = (paste0(homedir, '/baller/results/lh_mean_coupling_med_wall_-1.csv')), quote = F, row.names = F, col.names = F)
write.table(x = lh_map$V1, file = (paste0(homedir, '/baller/results/rh_mean_coupling_med_wall_-1.csv')), quote = F, row.names = F, col.names = F)
}
source(paste0(homedir, 'baller/scripts/imco_functions.R'))
source(paste0(homedir, '/baller/scripts/imco_functions.R'))
###########################################
### Make Trinarized Maps for Spin Test  ###
###########################################
### Author: Erica Baller
### Date 3/10/21
### pre: statistical maps (l and r), each 10242 vertices
### post: 6 matrices with 1s if value fdr corrected, 0 if not, and -1 if vertex in medial wall of yeo map
# lh and rh pos and neg together, positive alone, and negative alone
### uses: In order to spin my vertices in a way that allows me to later assess their yeo membership, I need all of my fdr values indicated, as well as which values are in the medial wall.  This script takes lh and rh fdr corrected vectors generated in previous scripts, booleanizes them into in/out of fdr map. Then, -1s are added for vertices in the medial wall.
### dependencis: and R will do. I used 3.2.5
## set abs and relative paths. Must toggle before running locally/on cluster
#homedir = "/Users/eballer/BBL/imco/pmacs/PMACS_remote"
homedir = "/project/imco"
source(paste0(homedir, '/baller/scripts/imco_functions.R'))
#### set # parcels in case I want to do 7 or 17 or something else in the future
parcel_type = "Yeo"
parcel_num = 7
input_parcel_array_length = 10242
#if I'd like to make mean maps as well
mean_maps = 1
#will loop through each of these
analyses <- c("coupling_accuracy") #, "cbf_accuracy", "alff_accuracy")
models <- c("gam_age", "gam_sex", "gam_exec_accuracy") #gam_age", "lm_age", "gam_sex", "lm_sex", "lm_accuracy", "lm_exec_accuracy")
corrs <- c("fdr05") #correction
parcel_mapping <- get_parcel_mapping_yeo(7)
lh_numerical_map <- parcel_mapping[[1]]
rh_numerical_map <- parcel_mapping[[2]]
for (analysis in analyses) {
for (model in models) {
for (corr in corrs) {
### set results path
stat_path <- paste0("/", analysis, "/")
print(stat_path)
result_path <- paste0(model, "_t_", corr)
print(result_path)
### set paths
## input
lh_stat_map <- read.csv(paste0(homedir, "/baller/results/", stat_path, "lh_", result_path, ".csv"), header = F)
rh_stat_map <- read.csv(paste0(homedir, "/baller/results/", stat_path, "rh_", result_path, ".csv"), header = F)
## output
lh_outdir <- paste0(homedir, "/baller/results/", stat_path, "lh_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir <- paste0(homedir, "/baller/results/", stat_path, "rh_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
lh_outdir_pos <- paste0(homedir, "/baller/results/", stat_path, "lh_pos_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir_pos <- paste0(homedir, "/baller/results/", stat_path, "rh_pos_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
lh_outdir_neg <- paste0(homedir, "/baller/results/", stat_path, "lh_neg_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
rh_outdir_neg <- paste0(homedir, "/baller/results/", stat_path, "rh_neg_", result_path, "_", parcel_type, parcel_num, "_1_0_-1.csv")
#convert stat map to boolean
lh_stat_boolean <- ifelse(lh_stat_map == 0, 0, 1)
rh_stat_boolean <- ifelse(rh_stat_map == 0, 0, 1)
lh_stat_boolean_pos <- ifelse(lh_stat_map > 0, 1, 0)
rh_stat_boolean_pos <- ifelse(rh_stat_map > 0, 1, 0)
lh_stat_boolean_neg <- ifelse(lh_stat_map < 0, 1, 0)
rh_stat_boolean_neg <- ifelse(rh_stat_map < 0, 1, 0)
#convert NAs to 0
lh_stat_boolean[is.na(lh_stat_boolean)] <- 0
rh_stat_boolean[is.na(rh_stat_boolean)] <- 0
lh_stat_boolean_pos[is.na(lh_stat_boolean_pos)] <- 0
rh_stat_boolean_pos[is.na(rh_stat_boolean_pos)] <- 0
lh_stat_boolean_neg[is.na(lh_stat_boolean_neg)] <- 0
rh_stat_boolean_neg[is.na(rh_stat_boolean_neg)] <- 0
#substitute -1 for those locations with medial wall stuff
lh_medial_wall_nums <- which(lh_numerical_map == 8)
rh_medial_wall_nums <- which(rh_numerical_map == 8)
lh_stat_boolean[lh_medial_wall_nums] <- -1
rh_stat_boolean[rh_medial_wall_nums] <- -1
lh_stat_boolean_pos[lh_medial_wall_nums] <- -1
rh_stat_boolean_pos[rh_medial_wall_nums] <- -1
lh_stat_boolean_neg[lh_medial_wall_nums] <- -1
rh_stat_boolean_neg[rh_medial_wall_nums] <- -1
#write output
write.table(x = lh_stat_boolean, file = lh_outdir, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean, file = rh_outdir, quote = F, row.names = F, col.names = F)
write.table(x = lh_stat_boolean_pos, file = lh_outdir_pos, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean_pos, file = rh_outdir_pos, quote = F, row.names = F, col.names = F)
write.table(x = lh_stat_boolean_neg, file = lh_outdir_neg, quote = F, row.names = F, col.names = F)
write.table(x = rh_stat_boolean_neg, file = rh_outdir_neg, quote = F, row.names = F, col.names = F)
}
}
}
###########################
##### for mean maps #######
###########################
if (mean_maps == 1){
#read in maps
lh_map <- read.csv(paste0(homedir, '/baller/results/mean_maps/n831_lh.coupling_coef_alff_cbf.fwhm15.fsaverage5.csv'), header = F)
rh_map <- read.csv(paste0(homedir, '/baller/results/mean_maps/n831_rh.coupling_coef_alff_cbf.fwhm15.fsaverage5.csv'), header = F)
#set medial wall to -1
lh_medial_wall_nums <- which(lh_numerical_map == 8)
rh_medial_wall_nums <- which(rh_numerical_map == 8)
lh_map$V1[lh_medial_wall_nums] = -1
rh_map$V1[rh_medial_wall_nums] = -1
#save maps
write.table(x = lh_map$V1, file = (paste0(homedir, '/baller/results/lh_mean_coupling_med_wall_-1.csv')), quote = F, row.names = F, col.names = F)
write.table(x = lh_map$V1, file = (paste0(homedir, '/baller/results/rh_mean_coupling_med_wall_-1.csv')), quote = F, row.names = F, col.names = F)
}
##############################################
########### Spin Test Distribution for #######
##########Intermodal Coupling Paper ##########
####### Author: Erica Baller
#### Date: 3/9/2021
#######
##pre: right and left 10242 x 1000 matrices from matlab SpinPermuFS, yeo R & L assignments
##post: 2 7 x 1000 matrices (r & l) that contain the proportion of vertices within a network divided by the total number of vertices, and plots
## uses: Takes output of spin test, and calcualted the number of vertices within each of yeo's 7 networks out of the number of total possible vertices within the network
#### 1) Read in the yeo network assignments and calculate total number of vertices per network
#### 2) Multiply the yeo networks x the matrices (so every value is 1 -7 if they were within the mask, -1--7 if they were medial wall, and 0 otherwise)
#### 3) Foreach permutation (r and l separately), and for each network, calculate the (# of vertices with a 1) divided(/) by the (number of total vertices within network minus number of negative vertices
#### 4) Store
#### 5) Plot
### dependencies: ggplot2, bigmemory, vroom
#library(bigmemory.sri)
library(ggplot2)
library(tidyr)
#################
### set home directory
#homedir <- "/Users/eballer/BBL/imco/pmacs/PMACS_remote"
homedir <- "/project/imco"
source(paste0(homedir, "/baller/scripts/imco_functions.R"))
#initialize
hemis <- c("lh", "rh")
permNum <- 1000
yeo_num <- 7
models = c("gam_age", "pos_gam_age", "neg_gam_age", "gam_sex", "pos_gam_sex", "neg_gam_sex", "lm_exec_accuracy", "pos_lm_exec_accuracy", "neg_lm_exec_accuracy", "gam_exec_accuracy", "pos_gam_exec_accuracy", "neg_gam_exec_accuracy")
#models = c("gam_exec_accuracy", "pos_gam_exec_accuracy", "neg_gam_exec_accuracy")
#set flag to 1 if you'd like to calculate a spin for a mean map. It uses the means rather than proportions so it is a little wee bit different
mean_coupling = 1
################
### Read in matrices
for (model in models) {
#{lh and rh}_gam_sex_t_fdr05 -> actual results
lh_t_fdr05_results <- read.table(paste0(homedir, "/baller/results/coupling_accuracy/lh_", model, "_t_fdr05_Yeo7_1_0_-1.csv"))
rh_t_fdr05_results <- read.table(paste0(homedir, "/baller/results/coupling_accuracy/rh_", model, "_t_fdr05_Yeo7_1_0_-1.csv"))
#spins
lh_spin <- t(read.table(paste0(homedir, "/baller/results/coupling_accuracy/spin_test_results/lh_spin_test_", model,"_output.csv"), sep = ","))
rh_spin <- t(read.table(paste0(homedir, "/baller/results/coupling_accuracy/spin_test_results/rh_spin_test_", model,"_output.csv"), sep = ","))
#bring together, with original values as first column
lh_act_results_and_spin <- cbind(lh_t_fdr05_results, lh_spin)
rh_act_results_and_spin <- cbind(rh_t_fdr05_results, rh_spin)
#grab list of yeo 7 networks in fsaverage5 space
yeo_networks <- get_parcel_mapping_yeo(yeo_num)
#separate into right and left
lh_yeo_network <- yeo_networks[[1]]
rh_yeo_network <- yeo_networks[[2]]
#count up number of vertices per network
lh_yeo_network_count_table <- table(lh_yeo_network)
rh_yeo_network_count_table <- table(rh_yeo_network)
#multiply yeo network x spin test
lh_spinxyeo <- lh_act_results_and_spin*lh_yeo_network
rh_spinxyeo <- rh_act_results_and_spin*rh_yeo_network
#proportions
#go through each hemisphere, go through each perm, and go through each network
lh_hemi_spin_proportions <- data.frame(matrix(nrow = yeo_num, ncol = (permNum + 1)))
rh_hemi_spin_proportions <- data.frame(matrix(nrow = yeo_num, ncol = (permNum + 1)))
for (hemi in hemis){
for (perm in 1:(permNum + 1)){
for (network in 1:yeo_num){
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, ",", perm, "] = ", proportion_potential_vertices)
eval(parse(text = as.character(storing_to_parse)))
}
}
}
write.table(lh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_", model, "_proportions.csv"), sep = ",", col.names = F, row.names = F)
write.table(rh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_", model, "_proportions.csv"), sep = ",", col.names = F, row.names = F)
#then plot
}
####################################
### save mean coupling spin info ###
####################################
if (mean_coupling == 1) {
lh_t_results <- read.table(paste0(homedir, "/baller/results/lh_mean_coupling_med_wall_-1.csv"))
rh_t_results <- read.table(paste0(homedir, "/baller/results/rh_mean_coupling_med_wall_-1.csv"))
#spins
lh_spin <- t(read.table(paste0(homedir, "/baller/results/coupling_accuracy/spin_test_results/lh_spin_test_mean_coupling_results_med_wall_-1_output.csv"), sep = ","))
rh_spin <- t(read.table(paste0(homedir, "/baller/results/coupling_accuracy/spin_test_results/rh_spin_test_mean_coupling_results_med_wall_-1_output.csv"), sep = ","))
#bring together, with original values as first column
lh_act_results_and_spin <- cbind(lh_t_results, lh_spin)
rh_act_results_and_spin <- cbind(rh_t_results, rh_spin)
#grab list of yeo 7 networks in fsaverage5 space
yeo_networks <- get_parcel_mapping_yeo(yeo_num)
#separate into right and left
lh_yeo_network <- yeo_networks[[1]]
rh_yeo_network <- yeo_networks[[2]]
#proportions
#go through each hemisphere, go through each perm, and go through each network
lh_hemi_spin_means <- data.frame(matrix(nrow = yeo_num, ncol = (permNum + 1)))
rh_hemi_spin_means <- data.frame(matrix(nrow = yeo_num, ncol = (permNum + 1)))
for (hemi in hemis){
for (perm in 1:(permNum + 1)){
for (network in 1:yeo_num){
#to evaluate
#number of vertices within network that are not medial wall
#first, grab all values in the network
all_ts_in_network_to_parse <- paste0(hemi, "_act_results_and_spin[which(", hemi,"_yeo_network == ", network, "),", perm, "]")
all_ts <- eval(parse(text = as.character(all_ts_in_network_to_parse)))
#remove -1s, i.e. medial wall
all_ts_remove_medial_wall <- all_ts[all_ts != -1]
#take the mean of the remaining
mean_spin <- mean(all_ts_remove_medial_wall)
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_means[", network, ",", perm, "] = ", mean_spin)
eval(parse(text = as.character(storing_to_parse)))
}
}
}
write.table(lh_hemi_spin_means, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_mean_coupling.csv"), sep = ",", col.names = F, row.names = F)
write.table(rh_hemi_spin_means, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_mean_coupling.csv"), sep = ",", col.names = F, row.names = F)
#then plot
}
####### Violin Plots ###
#### Author: Erica Baller
### 3/16/2021
###pre: requires that you have run the spin tests for your models, including the positive and negative spin tests
###post: 2 violin plots per model. Violin plot x axis - yeo networks, y axis - proportion of vertices within networks. dotted lines - mean from permutations
#### plot 1 will contain a thick black line for the *actual values from your analysis so you can compare how far above or below your value is from permuted
#### plot 2 will contain red lines detailing where the actual values from your analysis from the POSITIVE domain, blue for NEGATIVE
#### You will also get a table that tells you the p value (uncorrected) for each network within each model.
#### for my final plot, I added a * to these manually
### uses: Creates violin plots and analyses to help make sense of the results from permutation spin tests. The question we are asking is:
### what is the likelihood that the number of vertices within a network is significant rather than due to chance
### dependencies: Using R 3.6.3 but any R will do. Libraries to include listed below
library(tidyr)
library(ggplot2)
library(reshape)
#################
### set home directory
homedir <- "/Users/eballer/BBL/imco/pmacs/PMACS_remote"
#homedir <- "/project/imco"
source(paste0(homedir, '/baller/scripts//imco_functions.R'))
#outdir_name <- "spin_stats_gam_sex_lm_exec_acc_all_pos_neg"
outdir_name <- "spin_stats_gam_sex_gam_exec_acc_all_pos_neg"
models_for_stats = c("gam_age", "pos_gam_age", "neg_gam_age", "gam_sex", "pos_gam_sex", "neg_gam_sex","lm_exec_accuracy", "pos_lm_exec_accuracy", "neg_lm_exec_accuracy", "gam_exec_accuracy", "pos_gam_exec_accuracy", "neg_gam_exec_accuracy", "mean_coupling")
models_for_plots = c("gam_age", "gam_sex", "lm_exec_accuracy", "gam_exec_accuracy")
network_names <- c("VIS", "MOT", "DA", "VA", "LIM", "FP", "DM")
num_spins = 2000
#get Yeo colors from function, these values were set manually - this can be obtained through https://surfer.nmr.mgh.harvard.edu/fswiki/CorticalParcellation_Yeo2011
#I typed the RGB values into a rgb -> hex converter and stored the values here. Works!
yeo_colors <- get_yeo7_colors()
#for storing statistics at the end
stats <- data.frame(matrix(nrow = 7, ncol = length(models_for_stats)))
names(stats) <- models_for_stats
row.names(stats) <- network_names
for (model in models_for_stats) {
if (model == "mean_coupling") {
lh_spin_df <- data.frame(read.table(paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_mean_coupling.csv"), sep = ","))
rh_spin_df <- data.frame(read.table(paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_mean_coupling.csv"), sep = ","))
} else {
lh_spin_df <- data.frame(read.table(paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_", model, "_proportions.csv"), sep = ","))
rh_spin_df <- data.frame(read.table(paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_", model, "_proportions.csv"), sep = ","))
}
#take means of left and right
actual_results <- (lh_spin_df[,1] + rh_spin_df[,1])/2
#dataframes for all spins
spin_without_target_col <- cbind(lh_spin_df[,2:1001],rh_spin_df[,2:1001])
####### Stats ########
for (i in 1:7){
#store p values
#equivalen to: stats$model[i] <- (length(which(spin_without_target_col[i,] > actual_results[i]))/2000)
eval(parse(text=as.character(paste0("stats$", model, "[", i ,"] <- (length(which(spin_without_target_col[",i, ",] > actual_results[", i, "]))/", num_spins, ")"))))
}
}
print(stats
)
library(tidyr)
library(ggplot2)
library(reshape)
#################
### set home directory
#homedir <- "/Users/eballer/BBL/imco/pmacs/PMACS_remote"
homedir <- "/project/imco"
source(paste0(homedir, '/baller/scripts//imco_functions.R'))
#outdir_name <- "spin_stats_gam_sex_lm_exec_acc_all_pos_neg"
outdir_name <- "spin_stats_gam_sex_gam_exec_acc_all_pos_neg"
models_for_stats = c("gam_age", "pos_gam_age", "neg_gam_age", "gam_sex", "pos_gam_sex", "neg_gam_sex","lm_exec_accuracy", "pos_lm_exec_accuracy", "neg_lm_exec_accuracy", "gam_exec_accuracy", "pos_gam_exec_accuracy", "neg_gam_exec_accuracy", "mean_coupling")
models_for_plots = c("gam_age", "gam_sex", "lm_exec_accuracy", "gam_exec_accuracy")
network_names <- c("VIS", "MOT", "DA", "VA", "LIM", "FP", "DM")
num_spins = 2000
#get Yeo colors from function, these values were set manually - this can be obtained through https://surfer.nmr.mgh.harvard.edu/fswiki/CorticalParcellation_Yeo2011
#I typed the RGB values into a rgb -> hex converter and stored the values here. Works!
yeo_colors <- get_yeo7_colors()
#for storing statistics at the end
stats <- data.frame(matrix(nrow = 7, ncol = length(models_for_stats)))
names(stats) <- models_for_stats
row.names(stats) <- network_names
for (model in models_for_stats) {
if (model == "mean_coupling") {
lh_spin_df <- data.frame(read.table(paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_mean_coupling.csv"), sep = ","))
rh_spin_df <- data.frame(read.table(paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_mean_coupling.csv"), sep = ","))
} else {
lh_spin_df <- data.frame(read.table(paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_", model, "_proportions.csv"), sep = ","))
rh_spin_df <- data.frame(read.table(paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_", model, "_proportions.csv"), sep = ","))
}
#take means of left and right
actual_results <- (lh_spin_df[,1] + rh_spin_df[,1])/2
#dataframes for all spins
spin_without_target_col <- cbind(lh_spin_df[,2:1001],rh_spin_df[,2:1001])
####### Stats ########
for (i in 1:7){
#store p values
#equivalen to: stats$model[i] <- (length(which(spin_without_target_col[i,] > actual_results[i]))/2000)
eval(parse(text=as.character(paste0("stats$", model, "[", i ,"] <- (length(which(spin_without_target_col[",i, ",] > actual_results[", i, "]))/", num_spins, ")"))))
}
}
print(stats)
write.csv(stats, paste0(homedir, "/baller/results/coupling_accuracy/spin_test_results/", outdir_name, ".csv"))
violin_plot_means_mean_coupling(homedir = homedir, network_names = network_names, num_spins = num_spins)
violin_plot_pos_and_neg_lines(homedir = homedir, models = models_for_plots, network_names = network_names, num_spins = num_spins)
violin_plot_means(homedir = homedir, models = models_for_plots, network_names = network_names, num_spins = num_spins)
#violin_plot_pos_and_neg_lines_with_color_gradation(homedir = homedir, models = models_for_plots, network_names = network_names, num_spins = num_spins)
